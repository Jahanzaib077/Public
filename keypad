public static string OldPhonePad(string input)
    {
        // Keypad mapping
        var keypad = new Dictionary<char, string>
        {
            { '1', "&'(" },
            { '2', "ABC" },
            { '3', "DEF" },
            { '4', "GHI" },
            { '5', "JKL" },
            { '6', "MNO" },
            { '7', "PQRS" },
            { '8', "TUV" },
            { '9', "WXYZ" },
            { '0', " " }   // space
        };

        var output = new StringBuilder();
        char lastCharacter = '\0';
        int count = 0;

        foreach (char c in input)
        {

            if(char.IsDigit(c))
            {
                if (c == lastCharacter)
                {
                    count++;
                }
                else
                {
                    if (lastCharacter != '\0' && keypad.ContainsKey(lastCharacter))
                    {
                        string letters = keypad[lastCharacter];
                        output.Append(letters[(count - 1) % letters.Length]);
                    }
                    lastCharacter = c;
                    count = 1;
                }
            }
            
            else if (c == '*')
            {
                // backspace
                if (count > 0 && lastCharacter != '\0' && keypad.ContainsKey(lastCharacter))
                {
                    // clear last buffered letter instead of output
                    count = 0;
                    lastCharacter = '\0';
                }
                else if (output.Length > 0)
                {
                    output.Remove(output.Length - 1, 1);
                }
            }
            else if (c == ' ')
            {
                // flush previous key
                if (lastCharacter != '\0' && keypad.ContainsKey(lastCharacter))
                {
                    string letters = keypad[lastCharacter];
                    output.Append(letters[(count - 1) % letters.Length]);
                }
                // reset
                lastCharacter = '\0';
                count = 0;
            }
            else if (c == '#')
            {
                // process last pressed key before ending
                if (lastCharacter != '\0' && keypad.ContainsKey(lastCharacter))
                {
                    string letters = keypad[lastCharacter];
                    output.Append(letters[(count - 1) % letters.Length]);
                }
                break;
            }
        }

        return output.ToString();
    }
